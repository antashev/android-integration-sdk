plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'maven-publish'
    id 'org.jetbrains.dokka' version '1.6.10'
}

def libVersionName = "1.1.291" //todo
version = libVersionName
group 'ru.modulkassa.pos'

android {
    compileSdkVersion versions.compileSdk

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionName libVersionName
        buildConfigField 'String', 'VERSION_NAME', "\"${libVersionName}\""
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // For Kotlin projects
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation libraries.kotlin
    implementation libraries.gson
    implementation libraries.timber

    testImplementation libraries.junit
    testImplementation libraries.robolectric
    testImplementation libraries.mockito
    testImplementation(libraries.mockitoKotlin) {
        exclude(group: 'org.jetbrains.kotlin')
    }
    testImplementation libraries.kotlinJUnit
    testImplementation libraries.truth
}

Properties properties = new Properties()
File propertiesFile = project.rootProject.file('local.properties')
if (propertiesFile.exists()) {
    properties.load(propertiesFile.newDataInputStream())
}

dokkaJavadoc.configure {
    suppressObviousFunctions.set(false) // Suppress obvious functions like default toString or equals
}

task packageJavadoc(type: Jar, dependsOn: 'dokkaJavadoc') {
    from dokkaJavadoc.outputDirectory
    archiveClassifier = 'javadoc'
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

artifacts {
    archives sourceJar, packageJavadoc
}

publishing {

    repositories {
        maven {
            name 'Internal'
            url properties.getProperty("nexus.url")
            credentials {
                username properties.getProperty("nexus.username")
                password properties.getProperty("nexus.password")
            }
        }
    }

    publications {
        release(MavenPublication) {
            groupId group
            artifactId 'integration-library'
            version libVersionName
            artifact("$buildDir/outputs/aar/integration-library-release.aar")
            artifact packageJavadoc
            artifact sourceJar

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.api.allDependencies.each {
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
                configurations.implementation.allDependencies.each {
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}


